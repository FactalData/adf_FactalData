{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-FactalData"
		},
		"AzureDataLake_FinanceFiles_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLake_FinanceFiles'"
		},
		"AzureSqlDatabase_FactalData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_FactalData'"
		},
		"DynamicAzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DynamicAzureSqlDatabase'"
		},
		"DynamicSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DynamicSqlServer'"
		},
		"sqldb_WBC_Data_Analytics_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqldb_WBC_Data_Analytics'"
		},
		"stwbcdataanalytics_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'stwbcdataanalytics'"
		},
		"tempFactalData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'tempFactalData'"
		},
		"ADFControlAKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-factaldata.vault.azure.net/"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stdatateamshared01.dfs.core.windows.net"
		},
		"AzureDataLake_FinanceFiles_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sacfactaldata01.dfs.core.windows.net"
		},
		"AzureStorageAccount_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stdatateamdev01.dfs.core.windows.net"
		},
		"DynamicDynamics_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "svc_D365MDP@mencap.org.uk"
		},
		"DynamicFileSystem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\david\\OneDrive - Factal Data Limited\\Documents\\Finance"
		},
		"DynamicFileSystem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "david@brinn.co.uk"
		},
		"DynamicRestService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"DynamicRestService_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().UserName}"
		},
		"DynamicSqlServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "RMS\\JS145336"
		},
		"SurfaceFiles_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\david\\OneDrive - Factal Data Limited\\Documents\\Finance"
		},
		"SurfaceFiles_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "david@brinn.co.uk"
		},
		"WebTable_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.caravanclub.co.uk/uk-holidays/uk-search-and-book/certificated-locations/search/?Name=&SiteContentId=&County=&Town=&Postcode=&LatLong=&p=1"
		},
		"kv_WBC_DataAnalytics_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "@{linkedService().KeyVaultName}"
		},
		"stwbcdataanalytics_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stwbcdataanalyticsprod.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADF_Process AAS Cube')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process AAS Model",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.ProcessAASURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@pipeline().parameters.ProcessAASBody",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProcessAASBody": {
						"type": "string",
						"defaultValue": {
							"AnalysisServicesDatabaseName": "Dataplatform_Alpha_Test",
							"AnalysisServicesServer": "asazure://uksouth.asazure.windows.net/asdatateamdev01:rw",
							"DatabaseRefreshType": "Full"
						}
					},
					"ProcessAASURL": {
						"type": "string",
						"defaultValue": "https://4423c709-d203-482a-aec4-e03712fc9d4e.webhook.uks.azure-automation.net/webhooks?token=wtOEZNAEVOJGorcYpqsfHi3wx363WnRBTOlo5odndG4%3d"
					}
				},
				"folder": {
					"name": "Junk"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:36:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADHoc_Copy REST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Bulk Copy Data task from a REST API to SQL Server",
				"activities": [
					{
						"name": "Bulk Copy Data From REST API to Azure SQLDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "01:00:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "AzureSqlSink",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['OutcomeWeeklyTotal']"
										},
										"sink": {
											"name": "OutcomeWeeklyTotal"
										}
									},
									{
										"source": {
											"path": "$['OutcomeMonthlyTotal']"
										},
										"sink": {
											"name": "OutcomeMonthlyTotal"
										}
									},
									{
										"source": {
											"path": "$['IncomeWeeklyTotal']"
										},
										"sink": {
											"name": "IncomeWeeklyTotal"
										}
									},
									{
										"source": {
											"path": "$['IncomeMonthyTotal']"
										},
										"sink": {
											"name": "IncomeMonthyTotal"
										}
									},
									{
										"source": {
											"path": "$['MoneyLeftOverWeekly']"
										},
										"sink": {
											"name": "MoneyLeftOverWeekly"
										}
									},
									{
										"source": {
											"path": "$['MoneyLeftOverMonthly']"
										},
										"sink": {
											"name": "MoneyLeftOverMonthly"
										}
									},
									{
										"source": {
											"path": "$['HasASPBeenEdited']"
										},
										"sink": {
											"name": "HasASPBeenEdited"
										}
									},
									{
										"source": {
											"path": "$['ManagerSignOff']"
										},
										"sink": {
											"name": "ManagerSignOff"
										}
									},
									{
										"source": {
											"path": "$['FirstEdit']"
										},
										"sink": {
											"name": "FirstEdit"
										}
									},
									{
										"source": {
											"path": "$['ASPStatus']"
										},
										"sink": {
											"name": "ASPStatus"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicREST",
								"type": "DatasetReference",
								"parameters": {
									"BaseURL": "https://mencap-poc.mendixcloud.com/rest/restannualspendingplan/v1/annualspendingplan?offset=0&limit=10",
									"UserName": "restuser",
									"Password": "RestPassword"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sql-datateam-shared-01.database.windows.net"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-datateam-shared-02"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Landing"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "plannedactivity"
					},
					"BaseURL": {
						"type": "string",
						"defaultValue": "https://mencap-poc-accp.mendixcloud.com/rest/restplannedactivity/v1/plannedactivity"
					},
					"Offset": {
						"type": "int",
						"defaultValue": 0
					},
					"Amount": {
						"type": "int",
						"defaultValue": 10
					},
					"MaxRowCount": {
						"type": "int",
						"defaultValue": 20
					}
				},
				"folder": {
					"name": "Junk"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T10:05:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynamicREST')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADHoc_Dynamic Bulk Copy REST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Bulk Copy Data task from a REST API to SQL Server",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Bulk Copy Data From REST API to Azure SQLDB",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "01:00:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DynamicREST",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@item().BaseURL",
													"type": "Expression"
												},
												"UserName": "restuser",
												"Password": "RestPassword"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.DatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@pipeline().parameters.SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Landing].[pr_RESTBulkLoad]",
								"storedProcedureParameters": {
									"Amount": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.Amount",
											"type": "Expression"
										}
									},
									"BaseURL": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.BaseURL",
											"type": "Expression"
										}
									},
									"MaxRowCount": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxRowCount",
											"type": "Expression"
										}
									},
									"Offset": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.Offset",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sql-datateam-shared-01.database.windows.net"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-datateam-shared-02"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Landing"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "plannedactivity"
					},
					"BaseURL": {
						"type": "string",
						"defaultValue": "https://mencap-poc-accp.mendixcloud.com/rest/restplannedactivity/v1/plannedactivity"
					},
					"Offset": {
						"type": "int",
						"defaultValue": 0
					},
					"Amount": {
						"type": "int",
						"defaultValue": 10
					},
					"MaxRowCount": {
						"type": "int",
						"defaultValue": 20
					}
				},
				"folder": {
					"name": "Junk"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T10:05:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DynamicREST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ContinuousRunPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WaitForMe",
						"description": "Wait for 10 seconds",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "Set the MomentInTime variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WaitForMe",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MomentInTime",
							"value": {
								"value": "@convertTimeZone(utcnow(),'UTC','Greenwich Mean Time')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"MomentInTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyAllFilesInContainer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy data from all files within a storage container to an Azure SQL Database",
				"activities": [
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Load Each File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('MasterRunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the files to be copied",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If MasterRunId is not set",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataLakeBinaryFolder",
								"type": "DatasetReference",
								"parameters": {
									"DataLakeStorageAccount": {
										"value": "@pipeline().parameters.DataLake",
										"type": "Expression"
									},
									"DataLakeContainer": {
										"value": "@pipeline().parameters.DataLakeContainer",
										"type": "Expression"
									},
									"DataLakeDirectory": {
										"value": "@pipeline().parameters.DataLakeDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter for just files and not sub folders",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "List the files to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the files to be copied').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If MasterRunId is not set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.MasterRunId)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set MasterRunId False",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().parameters.MasterRunId",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set MasterRunId True",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Collect the metadata for each file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Delete Metadata Config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter for just files and not sub folders').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get  the Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DataLakeDelimitedFile",
											"type": "DatasetReference",
											"parameters": {
												"Directory": {
													"value": "@concat(pipeline().parameters.DataLakeContainer, '/', pipeline().parameters.DataLakeDirectory)",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"Container": {
													"value": "@Item().Container",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "EXEC pr_LoadFileMetaData",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get  the Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_LoadFileMetaData]",
										"storedProcedureParameters": {
											"FileName": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastModifiedDate": {
												"value": {
													"value": "@activity('Get  the Metadata').output.LastModified",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.DatabaseName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup the files to Load",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Collect the metadata for each file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT FileName, FileDate \nFROM [ADF].[FileMetaData] \nORDER BY FileDate DESC",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"SchemaName": "ADF",
									"TableName": "FileMetaData"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Load Each File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup the files to Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup the files to Load').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy the file data into the table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "FilePath",
													"value": "$$FILEPATH"
												},
												{
													"name": "FileDate",
													"value": {
														"value": "@item().FileDate",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DataLakeDelimitedFile",
											"type": "DatasetReference",
											"parameters": {
												"Directory": {
													"value": "@pipeline().parameters.DataLakeDirectory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.DataLakeContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.ServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.DatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@pipeline().parameters.SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.TableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Delete Metadata Config",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Filter for just files and not sub folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_DeleteMetaDataConfig]"
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "sql-factaldata-01.database.windows.net"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-factaldata-02"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "LoadTest"
					},
					"ETLServerName": {
						"type": "string",
						"defaultValue": "sql-factaldata-01.database.windows.net"
					},
					"ETLDatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-factaldata-02"
					},
					"ETLSchemaName": {
						"type": "string",
						"defaultValue": "ADF"
					},
					"ETLTableName": {
						"type": "string",
						"defaultValue": "DynamicPipelineConfig"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					},
					"DataLakeContainer": {
						"type": "string",
						"defaultValue": "loadtest"
					},
					"DataLakeDirectory": {
						"type": "string"
					},
					"DataLake": {
						"type": "string",
						"defaultValue": "stdatateamshared01"
					}
				},
				"variables": {
					"MasterRunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:46:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeBinaryFolder')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeDelimitedFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyAzureSQLQueryToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task but using a query as the data source",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the Queries to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the Queries to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If AzureSQLDBServerType",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().AzureSQLDBSourceServerType)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set TaskStartTime - SQL",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - SQL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Data From SQL Server",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - SQL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - SQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataRead": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.dataread",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataWritten": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.dataWritten",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"CopyDuration": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"Throughput": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.throughput",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.effectiveIntegrationRuntime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo SQL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Data From SQL Server",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].code",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].EventType",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].Category",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Copy Data From SQL Server",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - SQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@Item().UseQueryDetail",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "SQLServerTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().SourceServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().SourceDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().SourceSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().SourceTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().DestinationServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy Data From Azure SQL Database",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@Item().UseQueryDetail",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().SourceServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().SourceDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().SourceSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().SourceTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().DestinationServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set TaskStartTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Data From Azure SQL Database",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataRead": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.dataread",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataWritten": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.dataWritten",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"CopyDuration": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"Throughput": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.throughput",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.effectiveIntegrationRuntime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Data From Azure SQL Database",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].code",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].EventType",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Category",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the Queries to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName], [UseQueryDetail],  \t\t[AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t \t\t[PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active]  FROM [ADF].[DynamicPipelineConfig]   WHERE [TaskType] = 'CopyData'   AND UseQuery = 1 AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T11:00:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/SQLServerTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyAzureSQLToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If AzureSQLDBServerType",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().AzureSQLDBSourceServerType)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy Data From SQL Server",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - SQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "SQLServerTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().SourceServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().SourceDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().SourceSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().SourceTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().DestinationServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set TaskStartTime - SQL",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - SQL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Data From SQL Server",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - SQL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - SQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataRead": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.dataread",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataWritten": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.dataWritten",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"CopyDuration": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"Throughput": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.throughput",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.effectiveIntegrationRuntime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo SQL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Data From SQL Server",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].code",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].EventType",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].Category",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy Data From Azure SQL Database",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"tableOption": "autoCreate",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().SourceServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().SourceDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().SourceSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().SourceTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().DestinationServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set TaskStartTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Data From Azure SQL Database",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataRead": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.dataread",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataWritten": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.dataWritten",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"CopyDuration": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"Throughput": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.throughput",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.effectiveIntegrationRuntime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Data From Azure SQL Database",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].code",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].EventType",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Category",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": "Time",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t [AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t [PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active]  FROM [ADF].[DynamicPipelineConfig]   WHERE [TaskType] = 'CopyData' AND (UseQuery = 0 or UseQuery IS NULL)  AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T11:00:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/SQLServerTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyAzureSQLToDataLakeDelimetedFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task and copy data from Azure SQL Database to file within the data lake",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If AzureSQLDBServerType",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().AzureSQLDBSourceServerType)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy Data From SQL Server",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - SQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "SQLServerTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().SourceServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().SourceDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().SourceSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().SourceTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DataLakeDelimitedFile",
														"type": "DatasetReference",
														"parameters": {
															"Directory": {
																"value": "@Item().SubDirectory",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(Item().FileName, '.', Item().FileExtension)",
																"type": "Expression"
															},
															"Container": {
																"value": "@Item().Container",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set TaskStartTime - SQL",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - SQL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Data From SQL Server",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - SQL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - SQL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataRead": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.dataread",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataWritten": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.dataWritten",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"CopyDuration": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"Throughput": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.throughput",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.effectiveIntegrationRuntime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo SQL",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Data From SQL Server",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].code",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].EventType",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "@activity('Copy Data From SQL Server').output.errors[0].Category",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy Data From Azure SQL Database",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "AzureSqlTable",
														"type": "DatasetReference",
														"parameters": {
															"ServerName": {
																"value": "@Item().SourceServerName",
																"type": "Expression"
															},
															"DatabaseName": {
																"value": "@Item().SourceDatabaseName",
																"type": "Expression"
															},
															"SchemaName": {
																"value": "@Item().SourceSchemaName",
																"type": "Expression"
															},
															"TableName": {
																"value": "@Item().SourceTableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DataLakeDelimitedFile",
														"type": "DatasetReference",
														"parameters": {
															"Directory": {
																"value": "@Item().Subdirectory",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(Item().FileName, '.', Item().FileExtension)",
																"type": "Expression"
															},
															"Container": {
																"value": "@Item().Container",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Set TaskStartTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Copy Data From Azure SQL Database",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RowsRead": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataRead": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.dataread",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"DataWritten": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.dataWritten",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"CopyDuration": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.CopyDuration",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"Throughput": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.throughput",
																"type": "Expression"
															},
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.effectiveIntegrationRuntime",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy Data From Azure SQL Database",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].code",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].EventType",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Category",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t [AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t [PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active], [SubDirectory], [FileName], [FileExtension], [Container] FROM [ADF].[DynamicPipelineConfig]   WHERE [TaskType] = 'CopyDataToLake'  AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T11:00:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/SQLServerTable')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeDelimitedFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyBinaryFileFromDataLakeToStorageAccount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task",
				"activities": [
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy files from the Data Lake to the Storage Account",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('MasterRunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the files to be copied",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If MasterRunId is not set",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DataLakeBinaryFolder",
								"type": "DatasetReference",
								"parameters": {
									"DataLakeStorageAccount": {
										"value": "@pipeline().parameters.DataLakeStorageAccount",
										"type": "Expression"
									},
									"DataLakeContainer": {
										"value": "@pipeline().parameters.DataLakeContainer",
										"type": "Expression"
									},
									"DataLakeDirectory": {
										"value": "@pipeline().parameters.DataLakeDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter for just files and not sub folders",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "List the files to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the files to be copied').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy files from the Data Lake to the Storage Account",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter for just files and not sub folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter for just files and not sub folders').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy a File",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DataLakeBinaryFile",
											"type": "DatasetReference",
											"parameters": {
												"DataLakeStorageAccount": {
													"value": "@pipeline().parameters.DataLakeStorageAccount",
													"type": "Expression"
												},
												"DataLakeContainer": {
													"value": "@pipeline().parameters.DataLakeContainer",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "StorageAccountBinaryFile",
											"type": "DatasetReference",
											"parameters": {
												"StorageAccount": {
													"value": "@pipeline().parameters.StorageAccount",
													"type": "Expression"
												},
												"StorageAccountContainer": {
													"value": "@pipeline().parameters.StorageAccountContainer",
													"type": "Expression"
												},
												"FileName": {
													"value": "@Item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "If MasterRunId is not set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.MasterRunId)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set MasterRunId False",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().parameters.MasterRunId",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set MasterRunId True",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName],  \t\t \t\t[DestinationSchemaName], [DestinationTableName], [PipelineName], [LogicalGroup], [LogicalOrder],  \t\t \t\t[TaskType], [TruncateTable], [Active], [FileName], [SheetName], [FileExtension], [SubDirectory], [AzureSQLDBSourceServerType]  FROM [ADF].[DynamicPipelineConfig]     WHERE [TaskType] = 'CopyFile'  AND ([FileExtension] = 'xlsx' OR [FileExtension] = 'xls') AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					},
					"DataLakeStorageAccount": {
						"type": "string",
						"defaultValue": "stdatateamshared01"
					},
					"DataLakeContainer": {
						"type": "string",
						"defaultValue": "landing"
					},
					"StorageAccount": {
						"type": "string",
						"defaultValue": "stdatateamdev01"
					},
					"StorageAccountContainer": {
						"type": "string",
						"defaultValue": "landing"
					},
					"DataLakeDirectory": {
						"type": "string"
					}
				},
				"variables": {
					"MasterRunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:46:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeBinaryFolder')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeBinaryFile')]",
				"[concat(variables('factoryId'), '/datasets/StorageAccountBinaryFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDataLakeDelimetedFileToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the files to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the files to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Copy Data From Azure SQL Database",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set TaskStartTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DataLakeDelimitedFile",
											"type": "DatasetReference",
											"parameters": {
												"Directory": {
													"value": "@Item().Subdirectory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().FileName, '.', item().FileExtension)",
													"type": "Expression"
												},
												"Container": {
													"value": "@Item().Container",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@Item().DestinationServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@Item().DestinationDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@Item().DestinationSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@Item().DestinationTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set TaskStartTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskStartTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TaskEndTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy Data From Azure SQL Database",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskEndTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute pr_InsertTaskLogInfo - AzDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set TaskEndTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"PipelineRunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"TaskStartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TaskEndTime": {
												"value": {
													"value": "@variables('TaskEndTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"RowsCopied": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsRead": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.dataread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.CopyDuration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Throughput": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"IntegrationRuntime": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute pr_InsertErrorLogInfo AzDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Data From Azure SQL Database",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].code",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EventType": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"EventCategory": {
												"value": {
													"value": "@activity('Copy Data From Azure SQL Database').output.errors[0].Category",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the files to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": " SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t  [AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t  [PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active], [FileName], [SheetName], [FileExtension], [SubDirectory], [Container], [Range]   FROM [ADF].[DynamicPipelineConfig]    WHERE [TaskType] = 'CopyDataLakeFileToAzSQL' AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T11:00:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeDelimitedFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyDynamicsEntityToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task from a Dynamics Entity",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Copy Data From Dynamics",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set TaskStartTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DynamicsSource"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DynamicsEntity",
											"type": "DatasetReference",
											"parameters": {
												"EntityName": {
													"value": "@Item().SourceTableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@Item().DestinationServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@Item().DestinationDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@Item().DestinationSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@Item().DestinationTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set TaskStartTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskStartTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TaskEndTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy Data From Dynamics",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskEndTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute pr_InsertTaskLogInfo - AzDB_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set TaskEndTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"PipelineRunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"TaskStartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TaskEndTime": {
												"value": {
													"value": "@variables('TaskEndTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"RowsCopied": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsRead": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.dataread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.CopyDuration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Throughput": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"IntegrationRuntime": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute pr_InsertErrorLogInfo AzDB_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Data From Dynamics",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.errors[0].code",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EventType": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"EventCategory": {
												"value": {
													"value": "@activity('Copy Data From Dynamics').output.errors[0].Category",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": ".",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t [AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t [PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active]  FROM [ADF].[DynamicPipelineConfig]   WHERE [TaskType] = 'CopyDynamics' AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:14:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DynamicsEntity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyExcelFileToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set TaskStartTime - AzDB",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskStartTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TaskEndTime - AzDB",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy Data From Local File System",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskEndTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute pr_InsertTaskLogInfo - AzDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set TaskEndTime - AzDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"PipelineRunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"TaskStartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TaskEndTime": {
												"value": {
													"value": "@variables('TaskEndTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"RowsCopied": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsRead": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.dataread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.CopyDuration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Throughput": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"IntegrationRuntime": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute pr_InsertErrorLogInfo AzDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Data From Local File System",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].code",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EventType": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"EventCategory": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].Category",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Data From Local File System",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set TaskStartTime - AzDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": "$$FILEPATH"
												},
												{
													"name": "LoadStart",
													"value": {
														"value": "@variables('PipelineStartTime')",
														"type": "Expression"
													}
												},
												{
													"name": "RunId",
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicFileExcel",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@Item().Container",
													"type": "Expression"
												},
												"SubDirectory": {
													"value": "@Item().SubDirectory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(Item().FileName, '.', Item().FileExtension)",
													"type": "Expression"
												},
												"SheetName": {
													"value": "@Item().SheetName",
													"type": "Expression"
												},
												"Range": {
													"value": "@Item().Range",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@Item().DestinationServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@Item().DestinationDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@Item().DestinationSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@Item().DestinationTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t  [ConfigId], [ConfigDescription], [PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active],  [AzureSQLDBSourceServerType], [SourceServerName],  [SourceDatabaseName], [SourceSchemaName], [SourceTableName], [UseQuery], [UseQueryDetail],   [AzureSQLDBDestinationServerType], [DestinationServerName],  [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],   [AzureSQLDBStoredProcServerType], [StoredProcServerName], [StoredProcDatabaseName],  [StoredProcSchema], [StoredProcName],   [FileName], [SheetName], [FileExtension], [SubDirectory], [Container], [Range]   FROM [ADF].[DynamicPipelineConfig]      WHERE [TaskType] = 'CopyFile'  AND ([FileExtension] = 'xlsx' OR [FileExtension] = 'xls') AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:14:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DynamicFileExcel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFileSystemDelimetedFileToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set TaskStartTime - AzDB",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskStartTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TaskEndTime - AzDB",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy Data From Local File System",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskEndTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute pr_InsertTaskLogInfo - AzDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set TaskEndTime - AzDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"PipelineRunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"TaskStartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TaskEndTime": {
												"value": {
													"value": "@variables('TaskEndTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"RowsCopied": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsRead": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.dataread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.CopyDuration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Throughput": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"IntegrationRuntime": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute pr_InsertErrorLogInfo AzDB",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Data From Local File System",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].code",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EventType": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"EventCategory": {
												"value": {
													"value": "@activity('Copy Data From Local File System').output.errors[0].Category",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Data From Local File System",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set TaskStartTime - AzDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "FileName",
													"value": "$$FILEPATH"
												},
												{
													"name": "LoadStart",
													"value": {
														"value": "@variables('PipelineStartTime')",
														"type": "Expression"
													}
												},
												{
													"name": "RunId",
													"value": {
														"value": "@variables('RunId')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "FileSystemDelimitedFile",
											"type": "DatasetReference",
											"parameters": {
												"SubFolder": {
													"value": "@Item().SubDirectory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(Item().FileName, '.', Item().FileExtension)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@Item().DestinationServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@Item().DestinationDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@Item().DestinationSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@Item().DestinationTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName],  \t\t \t\t[DestinationSchemaName], [DestinationTableName], [PipelineName], [LogicalGroup], [LogicalOrder],  \t\t \t\t[TaskType], [TruncateTable], [Active], [FileName], [FileExtension], [SubDirectory], [AzureSQLDBSourceServerType]  FROM [ADF].[DynamicPipelineConfig]     WHERE [TaskType] = 'CopyFile'  AND [FileExtension] = 'csv' AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T11:00:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/FileSystemDelimitedFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyRESTEndpointToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task from a REST API to SQL Server",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If TruncateTable",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().TruncateTable)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "pr_TruncateTable",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_TruncateTable]",
													"storedProcedureParameters": {
														"DatabaseName": {
															"value": {
																"value": "@Item().DestinationDatabaseName",
																"type": "Expression"
															},
															"type": "String"
														},
														"SchemaName": {
															"value": {
																"value": "@Item().DestinationSchemaName",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@Item().DestinationTableName",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().DestinationServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DestinationDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set TaskStartTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If TruncateTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskStartTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TaskEndTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy Data From REST API to Azure SQLDB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskEndTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute pr_InsertTaskLogInfo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set TaskEndTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"PipelineRunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"TaskStartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TaskEndTime": {
												"value": {
													"value": "@variables('TaskEndTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"RowsCopied": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsRead": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.dataread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.CopyDuration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Throughput": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"IntegrationRuntime": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute pr_InsertErrorLogInfo AzDB_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Data From REST API to Azure SQLDB",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.errors[0].code",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EventType": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"EventCategory": {
												"value": {
													"value": "@activity('Copy Data From REST API to Azure SQLDB').output.errors[0].Category",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Data From REST API to Azure SQLDB",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Return Mapping Columns",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "02:00:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 2,
										"translator": {
											"value": "@json(activity('Return Mapping Columns').output.firstrow.json_output)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicREST",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@item().SourceServerName",
													"type": "Expression"
												},
												"UserName": "restuser",
												"Password": "RestPassword"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@Item().DestinationServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@Item().DestinationDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@Item().DestinationSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@Item().DestinationTableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Return Mapping Columns",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set TaskStartTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ADF].[pr_getColumnMapping]",
											"storedProcedureParameters": {
												"ConfigId": {
													"type": "Int32",
													"value": {
														"value": "@item().ConfigId",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.ETLServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.ETLDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@pipeline().parameters.ETLSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.ETLTableName",
													"type": "Expression"
												}
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": ".",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t  \t\t[AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t  \t\t[PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active], [SubDirectory]   \t\tFROM [ADF].[DynamicPipelineConfig]   WHERE [TaskType] = 'CopyREST' AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:19:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DynamicREST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyRESTEndpointToDataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task from a REST API to SQL Server",
				"activities": [
					{
						"name": "Copy Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the tables to be copied",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the tables to be copied').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set TaskStartTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If ConfigId is 1511",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskStartTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TaskEndTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy Data From REST API to the Data Lake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaskEndTime",
										"value": {
											"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute pr_InsertTaskLogInfo",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set TaskEndTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"PipelineRunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"TaskStartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TaskEndTime": {
												"value": {
													"value": "@variables('TaskEndTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"RowsCopied": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RowsRead": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.dataread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataWritten": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.dataWritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.CopyDuration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"Throughput": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"IntegrationRuntime": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.effectiveIntegrationRuntime",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute pr_InsertErrorLogInfo AzDB_copy1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Data From REST API to the Data Lake",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@Item().ConfigId",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.errors[0].code",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.errors[0].Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"EventType": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.errors[0].EventType",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"EventCategory": {
												"value": {
													"value": "@activity('Copy Data From REST API to the Data Lake').output.errors[0].Category",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"RunId": {
												"value": {
													"value": "@variables('RunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StartTime": {
												"value": {
													"value": "@variables('TaskStartTime')",
													"type": "Expression"
												},
												"type": "Datetime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DynamicAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"ServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"DatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Copy Data From REST API to the Data Lake",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Return Mapping Columns",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "02:00:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 2,
										"translator": {
											"value": "@json(activity('Return Mapping Columns').output.firstrow.json_output)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DynamicREST",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@variables('BaseURL')",
													"type": "Expression"
												},
												"UserName": "restuser",
												"Password": "RestPassword"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataLakeDelimitedFile",
											"type": "DatasetReference",
											"parameters": {
												"Directory": {
													"value": "@Item().Subdirectory",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(Item().FileName, '.', Item().FileExtension)",
													"type": "Expression"
												},
												"Container": {
													"value": "@Item().Container",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Return Mapping Columns",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set TaskStartTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ADF].[pr_getColumnMapping]",
											"storedProcedureParameters": {
												"ConfigId": {
													"type": "Int32",
													"value": {
														"value": "@item().ConfigId",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ServerName": {
													"value": "@pipeline().parameters.ETLServerName",
													"type": "Expression"
												},
												"DatabaseName": {
													"value": "@pipeline().parameters.ETLDatabaseName",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@pipeline().parameters.ETLSchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.ETLTableName",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "If ConfigId is 1511",
									"description": "Planned Activity incremental load is ConfigId 1511 and appends the max date to the rest URL",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().ConfigId, 1511)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set BaseURL - False",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "BaseURL",
													"value": {
														"value": "@item().SourceServerName",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set BaseURL - True",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "BaseURL",
													"value": {
														"value": "@concat(item().SourceServerName, variables('PlannedActivityMaxDate'))",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": ".",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "List the tables to be copied",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Planned Activity Max Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' ORDER BY LogicalOrder') ",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupThePlannedActivityMaxChangedDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "DECLARE @MaxChangedDate VARCHAR(50)\nSET @MaxChangedDate =\n\t(SELECT REPLACE(MAX(changedDate),':','%3A') FROM [Landing].[PlannedActivity])\nSELECT LEFT(@MaxChangedDate, LEN(@MaxChangedDate) - 5) AS MaxChangedDate",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.SharedServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.SharedDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Planned Activity Max Date",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupThePlannedActivityMaxChangedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupThePlannedActivityMaxChangedDate').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set PlannedActivityMaxDate",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "PlannedActivityMaxDate",
										"value": {
											"value": "@item().MaxChangedDate",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t  \t\t[AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t  \t\t[PipelineName], [LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active], [SubDirectory], [FileName], [FileExtension], [Container]   \t\tFROM [ADF].[DynamicPipelineConfig]   WHERE [TaskType] = 'CopyRestToDataLake' AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"TriggerName": {
						"type": "string"
					},
					"SharedServerName": {
						"type": "string",
						"defaultValue": "sql-datateam-shared-01.database.windows.net"
					},
					"SharedDatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-datateam-shared-02"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					},
					"PlannedActivityMaxDate": {
						"type": "String"
					},
					"BaseURL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:26:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/DynamicREST')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeDelimitedFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteAzureSQLStoredProc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically run the Copy Data task",
				"activities": [
					{
						"name": "Set RunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().parameters.MasterRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Stored Procs",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set TriggerName",
						"description": "..",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().parameters.TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Stored Procs",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List the stored procs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List the stored procs').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If AzureSQLDBServerType",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(item().AzureSQLDBStoredProcServerType)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set TaskStartTime - SQLServer",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - SQLServer",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Exec Stored procedure - SQLServer",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - SQLServer",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - SQLServer",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].pr_InsertTaskLogInfo[]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": null,
															"type": "Int64"
														},
														"RowsRead": {
															"value": null,
															"type": "Int64"
														},
														"DataRead": {
															"value": null,
															"type": "Int64"
														},
														"DataWritten": {
															"value": null,
															"type": "Int64"
														},
														"CopyDuration": {
															"value": null,
															"type": "Int64"
														},
														"Throughput": {
															"value": null,
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": null,
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicSqlServer",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().ServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().DatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Exec Stored procedure - SQLServer",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - SQLServer",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(item().StoredProcSchema, '.', item().StoredProcName)",
														"type": "Expression"
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": "sql-datateam-dev-01.database.windows.net",
														"DatabaseName": "sqldb-datateam-dev-01"
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo AzDB - Stored Proc_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exec Stored procedure - SQLServer",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Exec Stored procedure - SQLServer').error.errorCode",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Exec Stored procedure - SQLServer').error.Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set TaskStartTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskStartTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set TaskEndTime - AzDB",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Exec Stored procedure on Azue SQL DB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "TaskEndTime",
													"value": {
														"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Execute pr_InsertTaskLogInfo - AzDB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskEndTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertTaskLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"PipelineRunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"TaskStartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"TaskEndTime": {
															"value": {
																"value": "@variables('TaskEndTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														},
														"RowsCopied": {
															"value": null,
															"type": "Int64"
														},
														"RowsRead": {
															"value": null,
															"type": "Int64"
														},
														"DataRead": {
															"value": null,
															"type": "Int64"
														},
														"DataWritten": {
															"value": null,
															"type": "Int64"
														},
														"CopyDuration": {
															"value": null,
															"type": "Int64"
														},
														"Throughput": {
															"value": null,
															"type": "Decimal"
														},
														"IntegrationRuntime": {
															"value": null,
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Exec Stored procedure on Azue SQL DB",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Set TaskStartTime - AzDB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@concat(item().StoredProcSchema, '.', item().StoredProcName)",
														"type": "Expression"
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@Item().StoredProcServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().StoredProcDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute pr_InsertErrorLogInfo AzDB - Stored Proc",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exec Stored procedure on Azue SQL DB",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ADF].[pr_InsertErrorLogInfo]",
													"storedProcedureParameters": {
														"ConfigId": {
															"value": {
																"value": "@Item().ConfigId",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('Exec Stored procedure on Azue SQL DB').error.errorCode",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('Exec Stored procedure on Azue SQL DB').error.Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"EventType": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"EventCategory": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"RunId": {
															"value": {
																"value": "@variables('RunId')",
																"type": "Expression"
															},
															"type": "Guid"
														},
														"StartTime": {
															"value": {
																"value": "@variables('TaskStartTime')",
																"type": "Expression"
															},
															"type": "Datetime"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "List the stored procs",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement False",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('DynamicStatement')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set DynamicStatement False",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat(pipeline().parameters.DynamicPipelineConfig, ' AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup, ' AND [StoredProcServerName] = ''', pipeline().parameters.ServerName, ''' AND [StoredProcDatabaseName] = ''', pipeline().parameters.DatabaseName, ''' ORDER BY [LogicalOrder] ASC')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT\t[ConfigId], [ConfigDescription], [AzureSQLDBSourceServerType], [SourceServerName], [SourceDatabaseName], [SourceSchemaName], [SourceTableName],  \t\t[AzureSQLDBDestinationServerType], [DestinationServerName], [DestinationDatabaseName], [DestinationSchemaName], [DestinationTableName],  \t\t[AzureSQLDBStoredProcServerType], [StoredProcServerName], [StoredProcDatabaseName], [StoredProcSchema], [StoredProcName], [PipelineName],  \t\t[LogicalGroup], [LogicalOrder], [TaskType], [TruncateTable], [Active] FROM [ADF].[DynamicPipelineConfig]  WHERE [TaskType] = 'StoredProc'  AND [Active] = 1"
					},
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"ETLServerName": {
						"type": "string"
					},
					"ETLDatabaseName": {
						"type": "string"
					},
					"ETLSchemaName": {
						"type": "string"
					},
					"ETLTableName": {
						"type": "string"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "0"
					},
					"LogicalOrder": {
						"type": "string",
						"defaultValue": "0"
					},
					"MasterRunId": {
						"type": "string",
						"defaultValue": "00000000-0000-0000-0000-000000000000"
					},
					"NumOfDays": {
						"type": "int",
						"defaultValue": -1
					},
					"RunModeCode": {
						"type": "string",
						"defaultValue": "Automatic"
					},
					"TriggerName": {
						"type": "string"
					}
				},
				"variables": {
					"RunId": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"DataFactoryName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"TaskStartTime": {
						"type": "String"
					},
					"TaskEndTime": {
						"type": "String"
					},
					"RowCount": {
						"type": "String"
					},
					"Status": {
						"type": "String"
					},
					"ErrorCode": {
						"type": "String"
					},
					"StoredProcName": {
						"type": "String"
					},
					"ErrorMessage": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					},
					"DynamicServerName": {
						"type": "String"
					},
					"DynamicDatabaseName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:26:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/DynamicSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinanceDataLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get the list of local files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set RunId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSource_Folder",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFile_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceFile_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter for just files and not sub folders",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get the list of local files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get the list of local files').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy the files to Data Lake",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter for just files and not sub folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter for just files and not sub folders').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyAFile",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinaryDataSource_File",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@pipeline().parameters.SourceFile_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceFile_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataDestination",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationFile_Location",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy the source data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate StageFiles table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FileName",
										"value": "$$FILEPATH"
									},
									{
										"name": "RunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Balance",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Balance",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "FileName",
											"type": "String"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RunId",
											"type": "String"
										},
										"sink": {
											"name": "RunId",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataLakeSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Stage_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Load new rows onto FactTransaction",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set RowsStaged",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "AccountKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DirectDebitKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DirectDebitKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "Amount",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "Balance",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "Balance",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SourceId",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "RunId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RunId",
											"type": "Guid",
											"physicalType": "uniqueidentifier"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzDB_NewRows",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzDB_FactTransaction",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate StageFiles table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy the files to Data Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Stage].[TruncateStageFiles]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_FactalData",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": "srv-factaldata-01.database.windows.net",
								"DBName": "db-factaldata-01-dev"
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": ".",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Update Direct Debits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "EndTime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RunId",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunId",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RowsStaged",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy the source data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsStaged",
							"value": {
								"value": "@string(activity('Copy the source data').output.rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set NewRows",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Load new rows onto FactTransaction",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "NewRows",
							"value": {
								"value": "@string(activity('Load new rows onto FactTransaction').output.rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Load RunLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[DWH].[LoadRunLog]",
							"storedProcedureParameters": {
								"NewRows": {
									"value": {
										"value": "@variables('NewRows')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RowsStaged": {
									"value": {
										"value": "@variables('RowsStaged')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"RunDate": {
									"value": {
										"value": "@variables('EndTime')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"RunId": {
									"value": {
										"value": "@variables('RunId')",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_FactalData",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": "srv-factaldata-01.database.windows.net",
								"DBName": "db-factaldata-01-dev"
							}
						}
					},
					{
						"name": "Update Categories",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set NewRows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[DWH].[UpdateCategory]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_FactalData",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": "srv-factaldata-01.database.windows.net",
								"DBName": "db-factaldata-01-dev"
							}
						}
					},
					{
						"name": "Update Direct Debits",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Categories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[DWH].[UpdateDirectDebit]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_FactalData",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": "srv-factaldata-01.database.windows.net",
								"DBName": "db-factaldata-01-dev"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFile_Location": {
						"type": "string",
						"defaultValue": "C:\\Users\\david\\OneDrive - Factal Data Limited\\Documents\\Finance"
					},
					"SourceFile_Directory": {
						"type": "string",
						"defaultValue": "Files"
					},
					"DestinationFile_Location": {
						"type": "string",
						"defaultValue": "financefiles"
					}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"EndTime": {
						"type": "String"
					},
					"RunId": {
						"type": "String"
					},
					"RowsStaged": {
						"type": "String"
					},
					"NewRows": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-05T10:26:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinaryDataSource_Folder')]",
				"[concat(variables('factoryId'), '/datasets/DataLakeSource')]",
				"[concat(variables('factoryId'), '/datasets/Stage_Files')]",
				"[concat(variables('factoryId'), '/datasets/AzDB_NewRows')]",
				"[concat(variables('factoryId'), '/datasets/AzDB_FactTransaction')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_FactalData')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDataSource_File')]",
				"[concat(variables('factoryId'), '/datasets/BinaryDataDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterControl - AzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Control Pipeline to determine Logical Group and order",
				"activities": [
					{
						"name": "Lookup Groups Stored Procs",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach CopyData - Query",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach CopyFile - Excel",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach CopyDynamics",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach CopyFileSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''StoredProc''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Group in DynamicPipelineConfig Stored Proc",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Groups Stored Procs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Groups Stored Procs').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there are no Stored Procs",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup Groups Stored Procs').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Dynamic Execute Stored Proc",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "ExecuteAzureSQLStoredProc",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ServerName": {
															"value": "@Item().StoredProcServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@Item().StoredProcDatabaseName",
															"type": "Expression"
														},
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyData''', ' AND (UseQuery = 0 OR UseQuery IS NULL)')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyData",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyData').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyData').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CopyAzureSQLToAzureSQL",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyAzureSQLToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('MasterRunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": "Time",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach Group in DynamicPipelineConfig Stored Proc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup CopyData - Query",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyData''', ' AND UseQuery = 1')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyData - Query",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyData - Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyData - Query').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - Query",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyData - Query').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Dynamic Copy Data - Query",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyAzureSQLQueryToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyFile - Excel",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyFile'' AND FileExtension LIKE ''%xls%''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyFile - Excel",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyFile - Excel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyFile - Excel').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - Excel File",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyFile - Excel').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Dynamic Copy Data - Excel File",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyExcelFileToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set DynamicStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If TriggerName is not set",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If MasterRunId is not set",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat('SELECT DISTINCT ',pipeline().parameters.LogicalGroup, ' AS LogicalGroup, [TaskType], [StoredProcServerName], [StoredProcDatabaseName] FROM [ADF].[DynamicPipelineConfig] WHERE [Active] = 1 AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If TriggerName is not set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.TriggerName)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set TriggerName False",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TriggerName",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set TriggerName True",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TriggerName",
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If MasterRunId is not set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.MasterRunId)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set MasterRunId False",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().parameters.MasterRunId",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set MasterRunId True",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyDynamics",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyDynamics''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyDynamics",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyDynamics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyDynamics').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - Excel File_copy1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyDynamics').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute ADF Dynamic Copy Dynamics Entity",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyDynamicsEntityToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyFileSystem",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyFileSystem'' AND FileExtension IN (''csv'',''txt'')')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyFileSystem",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyFileSystem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyFileSystem').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - CSV_copy1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyFileSystem').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Dynamic Copy FileSystem - File",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyFileSystemDelimetedFileToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ETLServerName": {
						"type": "string",
						"defaultValue": "sql-factaldata-01.database.windows.net"
					},
					"ETLDatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-factaldata-02"
					},
					"ETLSchemaName": {
						"type": "string",
						"defaultValue": "ADF"
					},
					"ETLTableName": {
						"type": "string",
						"defaultValue": "DynamicPipelineConfig"
					},
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT DISTINCT [LogicalGroup], [TaskType] FROM [ADF].[DynamicPipelineConfig] WHERE Active = 1"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "-9999"
					},
					"TriggerName": {
						"type": "string"
					},
					"MasterRunId": {
						"type": "string"
					}
				},
				"variables": {
					"LogicalGroup": {
						"type": "String"
					},
					"TaskType": {
						"type": "String"
					},
					"MasterRunId": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T15:19:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/ExecuteAzureSQLStoredProc')]",
				"[concat(variables('factoryId'), '/pipelines/CopyAzureSQLToAzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/CopyAzureSQLQueryToAzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/CopyExcelFileToAzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/CopyDynamicsEntityToAzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/CopyFileSystemDelimetedFileToAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterControl - DataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Control Pipeline to determine Logical Group and order",
				"activities": [
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('MasterRunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach CopyDataLakeFileToAzSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DynamicStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If TriggerName is not set",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If MasterRunId is not set",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DynamicStatement",
							"value": {
								"value": "@concat('SELECT DISTINCT ',pipeline().parameters.LogicalGroup, ' AS LogicalGroup, [TaskType], [StoredProcServerName], [StoredProcDatabaseName] FROM [ADF].[DynamicPipelineConfig] WHERE [Active] = 1 AND [LogicalGroup] = ', pipeline().parameters.LogicalGroup)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If TriggerName is not set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.TriggerName)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set TriggerName False",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TriggerName",
										"value": {
											"value": "@pipeline().parameters.TriggerName",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set TriggerName True",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TriggerName",
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If MasterRunId is not set",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.MasterRunId)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set MasterRunId False",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().parameters.MasterRunId",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set MasterRunId True",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MasterRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyRest",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyRest''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyRest",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyRest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyRest').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - Excel File_copy1_copy1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyRest').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Lookup Groups Copy Data - REST",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyRESTEndpointToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyRestToDataLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyRestToDataLake''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyRestToDataLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyRestToDataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyRestToDataLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - Rest To DataLake",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyRestToDataLake').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Lookup Groups Copy Data - REST_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyRESTEndpointToDataLake",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyDataToLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DynamicStatement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyDataToLake''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyDataToLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyDataToLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyDataToLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - Rest To DataLake_copy1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyDataToLake').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute Lookup Groups Copy Data - REST_copy1_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyAzureSQLToDataLakeDelimetedFile",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Lookup CopyDataLakeFileToAzSQL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach CopyRest",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach CopyRestToDataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach CopyDataToLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(variables('DynamicStatement'), ' AND TaskType = ''CopyDataLakeFileToAzSQL''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach CopyDataLakeFileToAzSQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup CopyDataLakeFileToAzSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup CopyDataLakeFileToAzSQL').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If there is nothing to Copy - DataLake To AzSQL",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Lookup CopyDataLakeFileToAzSQL').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute ADF_Dynamic Copy DataLake File to AzSQL",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CopyDataLakeDelimetedFileToAzureSQL",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"ETLServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"ETLDatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														},
														"ETLSchemaName": {
															"value": "@pipeline().parameters.ETLSchemaName",
															"type": "Expression"
														},
														"ETLTableName": {
															"value": "@pipeline().parameters.ETLTableName",
															"type": "Expression"
														},
														"LogicalGroup": {
															"value": "@Item().LogicalGroup",
															"type": "Expression"
														},
														"MasterRunId": {
															"value": "@variables('MasterRunId')",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@variables('TriggerName')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ETLServerName": {
						"type": "string",
						"defaultValue": "sql-factaldata-01.database.windows.net"
					},
					"ETLDatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-factaldata-02"
					},
					"ETLSchemaName": {
						"type": "string",
						"defaultValue": "ADF"
					},
					"ETLTableName": {
						"type": "string",
						"defaultValue": "DynamicPipelineConfig"
					},
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT DISTINCT [LogicalGroup], [TaskType] FROM [ADF].[DynamicPipelineConfig] WHERE Active = 1"
					},
					"LogicalGroup": {
						"type": "string",
						"defaultValue": "-9999"
					},
					"TriggerName": {
						"type": "string"
					},
					"MasterRunId": {
						"type": "string"
					}
				},
				"variables": {
					"LogicalGroup": {
						"type": "String"
					},
					"TaskType": {
						"type": "String"
					},
					"MasterRunId": {
						"type": "String"
					},
					"DynamicStatement": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T15:19:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/pipelines/CopyRESTEndpointToAzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/CopyRESTEndpointToDataLake')]",
				"[concat(variables('factoryId'), '/pipelines/CopyAzureSQLToDataLakeDelimetedFile')]",
				"[concat(variables('factoryId'), '/pipelines/CopyDataLakeDelimetedFileToAzureSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerBiRefreshDataSet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call Dataset Refresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get AAD Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIAppWorkspaceId,'/datasets/',pipeline().parameters.PBIDatasetId,'/refreshes')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(string(activity('Get AAD Token').output.token_type),' ',string(activity('Get AAD Token').output.access_token))",
									"type": "Expression"
								}
							},
							"body": {
								"helloww": "worldddd"
							}
						}
					},
					{
						"name": "Get AAD Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get TenantId from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get ClientId from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Secret from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',activity('Get TenantId from AKV').output.value,'/oauth2/token')",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&resource=https://analysis.windows.net/powerbi/api&client_id=',activity('Get ClientId from AKV').output.value,'&client_secret=',encodeUriComponent(activity('Get Secret from AKV').output.value))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get TenantId from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.KeyVaultDNSName,'secrets/',pipeline().parameters.SecretName_TenantId,'/',pipeline().parameters.SecretVersion_TenantId,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get ClientId from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.KeyVaultDNSName,'secrets/',pipeline().parameters.SecretName_SPClientId,'/',pipeline().parameters.SecretVersion_SPClientId,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get Secret from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(pipeline().parameters.KeyVaultDNSName,'secrets/',pipeline().parameters.SecretName_SPSecret,'/',pipeline().parameters.SecretVersion_SPSecret,'?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"simple": "body"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Until Refresh Complete",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Call Dataset Refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals('Unknown',variables('RefreshStatus')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Dataset Refresh Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": true
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.PBIAppWorkspaceId,'/datasets/',pipeline().parameters.PBIDatasetId,'/refreshes?$top=1')",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat(string(activity('Get AAD Token').output.token_type),' ',string(activity('Get AAD Token').output.access_token))",
												"type": "Expression"
											}
										},
										"body": {
											"helloww": "worldddd"
										}
									}
								},
								{
									"name": "Set RefreshStatus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Dataset Refresh Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RefreshStatus",
										"value": {
											"value": "@activity('Get Dataset Refresh Status').output.value[0].status",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Refresh Succeeded",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until Refresh Complete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('RefreshStatus'),'Completed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variableRefreshStatus_Fail",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RefreshStatus",
										"value": "\"Failed\""
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variableRefreshStatus",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RefreshStatus",
										"value": "\"Unknown\""
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SecretName_TenantId": {
						"type": "String",
						"defaultValue": "TenantId"
					},
					"SecretName_SPClientId": {
						"type": "String",
						"defaultValue": "ClientId"
					},
					"SecretName_SPSecret": {
						"type": "String",
						"defaultValue": "ClientSecret"
					},
					"KeyVaultDNSName": {
						"type": "string",
						"defaultValue": "https://azweu-pre-devdwh-akv-01.vault.azure.net/"
					},
					"SecretVersion_TenantId": {
						"type": "string",
						"defaultValue": "75274f9a94064a57ac95d93bfd4952c8"
					},
					"SecretVersion_SPClientId": {
						"type": "string",
						"defaultValue": "b1909cde83cf47cbb4f485371f3e69a3"
					},
					"SecretVersion_SPSecret": {
						"type": "string",
						"defaultValue": "2b126a6ba92349ad8972f0748a3d6e03"
					},
					"PBIAppWorkspaceId": {
						"type": "string",
						"defaultValue": "9019705d-997c-44f0-b8b3-d40c2c1be18c"
					},
					"PBIDatasetId": {
						"type": "string",
						"defaultValue": "42d6e2db-7f57-4503-b041-ec9d2ed9461e"
					}
				},
				"variables": {
					"RefreshStatus": {
						"type": "String",
						"defaultValue": "Unknown"
					},
					"vKeyVaultDNSName": {
						"type": "String"
					},
					"vSecretVersion_TenantId": {
						"type": "String"
					},
					"vSecretVersion_SPClientId": {
						"type": "String"
					},
					"vSecretVersion_SPSecret": {
						"type": "String"
					},
					"vPBIAppWorkspaceId": {
						"type": "String"
					},
					"vPBIDatasetId": {
						"type": "String"
					},
					"vScheduleDSRTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PowerBi"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:29:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerBiRefreshMasterControl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookUp to the Base Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.DynamicDatasets",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Each Row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookUp to the Base Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookUp to the Base Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable DNS Name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vKeyVaultDNSName",
										"value": {
											"value": "@item().DNSName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable TenantID",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variable DNS Name",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable SP ClientId",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable DatasetID",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable Secret",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable WorkspaceID",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable vScheduleDSR Time",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vSecretVersion_TenantId",
										"value": {
											"value": "@item().TenantID",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable SP ClientId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vSecretVersion_SPClientId",
										"value": {
											"value": "@item().ClientID",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable DatasetID",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vPBIDatasetId",
										"value": {
											"value": "@item().DatasetID",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable Secret",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vSecretVersion_SPSecret",
										"value": {
											"value": "@item().ClientSecret",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable WorkspaceID",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vPBIAppWorkspaceId",
										"value": {
											"value": "@item().WorkspaceID",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable vScheduleDSR Time",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vScheduleDSRTime",
										"value": {
											"value": "@item().TimeHH",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If the time is right",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set variable TenantID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(formatDateTime(pipeline().TriggerTime,'HH'),variables('vScheduleDSRTime'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Refresh Child Pipeline",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PowerBiRefreshDataSet",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"KeyVaultDNSName": {
															"value": "@variables('vKeyVaultDNSName')",
															"type": "Expression"
														},
														"SecretVersion_TenantId": {
															"value": "@variables('vSecretVersion_TenantId')",
															"type": "Expression"
														},
														"SecretVersion_SPClientId": {
															"value": "@variables('vSecretVersion_SPClientId')",
															"type": "Expression"
														},
														"SecretVersion_SPSecret": {
															"value": "@variables('vSecretVersion_SPSecret')",
															"type": "Expression"
														},
														"PBIAppWorkspaceId": {
															"value": "@variables('vPBIAppWorkspaceId')",
															"type": "Expression"
														},
														"PBIDatasetId": {
															"value": "@variables('vPBIDatasetId')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Insert Status SUCCESS",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Execute Refresh Child Pipeline",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ETL].[pr_PowerBiDatasetRefreshLog]",
													"storedProcedureParameters": {
														"WorkspaceID": {
															"value": {
																"value": "@variables('vPBIAppWorkspaceId')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DataSetID": {
															"value": {
																"value": "@variables('vPBIDatasetId')",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "SUCCEEDED",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Insert Status FAILED",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Execute Refresh Child Pipeline",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ETL].[pr_PowerBiDatasetRefreshLog]",
													"storedProcedureParameters": {
														"WorkspaceID": {
															"value": {
																"value": "@variables('vPBIAppWorkspaceId')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DataSetID": {
															"value": {
																"value": "@variables('vPBIDatasetId')",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "FAILED",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "DynamicAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"ServerName": {
															"value": "@pipeline().parameters.ETLServerName",
															"type": "Expression"
														},
														"DatabaseName": {
															"value": "@pipeline().parameters.ETLDatabaseName",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SecretName_TenantId": {
						"type": "String",
						"defaultValue": "TenantId"
					},
					"SecretName_SPClientId": {
						"type": "String",
						"defaultValue": "ClientId"
					},
					"SecretName_SPSecret": {
						"type": "String",
						"defaultValue": "ClientSecret"
					},
					"DynamicDatasets": {
						"type": "string",
						"defaultValue": " SELECT [ID], [DNSName], [TenantID], [ClientID], [ClientSecret], [WorkspaceID], [DatasetID], [TimeHH], [Active], [DateCreated]  FROM [ADF].[PowerBiDatasetRefresh] WHERE Active = 1"
					},
					"ETLServerName": {
						"type": "string",
						"defaultValue": "srv-factaldata-01.database.windows.net"
					},
					"ETLDatabaseName": {
						"type": "string",
						"defaultValue": "db-factaldata-01-dev"
					},
					"ETLSchemaName": {
						"type": "string",
						"defaultValue": "ADF"
					},
					"ETLTableName": {
						"type": "string",
						"defaultValue": "PowerBiDatasetRefresh"
					}
				},
				"variables": {
					"RefreshStatus": {
						"type": "String",
						"defaultValue": "Unknown"
					},
					"vSecretVersion_TenantId": {
						"type": "String"
					},
					"vSecretVersion_SPClientId": {
						"type": "String"
					},
					"vSecretVersion_SPSecret": {
						"type": "String"
					},
					"vPBIAppWorkspaceId": {
						"type": "String"
					},
					"vPBIDatasetId": {
						"type": "String"
					},
					"vScheduleDSRTime": {
						"type": "String"
					},
					"vexecutiontimeinHH": {
						"type": "String"
					},
					"vKeyVaultDNSName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "PowerBi"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:29:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/pipelines/PowerBiRefreshDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunDatabrickNotebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/david.brinn@factaldata.com/MyFinance",
							"baseParameters": {
								"hostName": "sql-factaldata-01.database.windows.net",
								"database": "sqldb-factaldata-01"
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicDataBricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Databricks"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-19T14:06:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicDataBricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "The Batch Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "WITH Batch_cte (BatchRunId, BatchStartTime, BatchEndTime, BatchDuration) AS\n\n(\nSELECT \n\n\tPipelineRunId AS BatchRunId, \n\tPipelineStartTime AS BatchStartTime, \n\tPipelineEndTime AS BatchEndTime,\n\tconvert(varchar(5),DateDiff(s, PipelineStartTime, PipelineEndTime)/3600)+':'+\n\tconvert(varchar(5),DateDiff(s, PipelineStartTime, PipelineEndTime)%3600/60)+':'+\n\tconvert(varchar(5),(DateDiff(s, PipelineStartTime, PipelineEndTime)%60)) AS BatchDuration\nFROM [ADF].[PipelineLog] \nWHERE PipelineName = 'ADF_Batch'\n)\n\n\nSELECT TOP 1 * FROM Batch_cte ORDER BY BatchStartTime DESC",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set BatchRunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "The Batch Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchRunId",
							"value": {
								"value": "@activity('The Batch Lookup').output.FirstRow.BatchRunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set BatchStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "The Batch Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchStartTime",
							"value": {
								"value": "@formatDateTime(activity('The Batch Lookup').output.FirstRow.BatchStartTime, 'HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set BatchEndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "The Batch Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchEndTime",
							"value": {
								"value": "@formatDateTime(activity('The Batch Lookup').output.FirstRow.BatchEndTime, 'HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set BatchDuration",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "The Batch Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchDuration",
							"value": {
								"value": "@activity('The Batch Lookup').output.FirstRow.BatchDuration",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set BatchRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set BatchStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set BatchEndTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set BatchDuration",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TaskCount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set CopyDataTaskCount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set CopyFileTaskCount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set StoredProcTaskCount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set ErrorCount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set BatchDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.SendMailLogicAppURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat('{\"DataFactoryName\": \"', pipeline().DataFactory, '\",\"EmailTo\": \"', pipeline().parameters.EmailTo, '\",\"PipelineName\": \"', pipeline().Pipeline, '\",\"Subject\":\"', pipeline().parameters.EmailSubject, '\",\"Message\":\"', pipeline().parameters.EmailMessage, '\",\"BatchRunId\":\"', variables('BatchRunId'), '\",\"BatchStartTime\":\"', variables('BatchStartTime'), '\",\"BatchEndTime\":\"', variables('BatchEndTime'), '\",\"BatchDate\":\"', variables('BatchDate'), '\",\"BatchDuration\":\"', variables('BatchDuration'), '\",\"TaskCount\":\"', variables('TaskCount'), '\",\"CopyDataTaskCount\":\"', variables('CopyDataTaskCount'), '\",\"CopyFileTaskCount\":\"', variables('CopyFileTaskCount'), '\",\"StoredProcTaskCount\":\"', variables('StoredProcTaskCount'), '\",\"ErrorCount\":\"', variables('ErrorCount'), '\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "The Batch Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.PipelineName)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set PipelineName False",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "PipelineName",
										"value": {
											"value": "@pipeline().parameters.PipelineName",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set PipelineName True",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Tasks And Errors Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "WITH Batch_cte (BatchRunId, BatchStartTime) AS\n\n(\nSELECT \n\n\tPipelineRunId AS BatchRunId, \n\tPipelineStartTime AS BatchStartTime\nFROM [ADF].[PipelineLog] \nWHERE PipelineName = 'ADF_Batch'\n)\n\nSELECT\n(\n\tSELECT CAST(COUNT(T.TaskId) AS VARCHAR(10)) AS TypeCount\n\tFROM [ADF].[TaskLog] T\n\tINNER JOIN (SELECT TOP 1 * FROM Batch_cte ORDER BY BatchStartTime DESC) B ON T.RunId = B.BatchRunId\n\tINNER JOIN [ADF].[DynamicPipelineConfig] D ON T.ConfigId = D.ConfigId\n) AS TaskCount,\n(\n\tSELECT CAST(COUNT(T.TaskId) AS VARCHAR(10)) AS TypeCount\n\tFROM [ADF].[TaskLog] T\n\tINNER JOIN (SELECT TOP 1 * FROM Batch_cte ORDER BY BatchStartTime DESC) B ON T.RunId = B.BatchRunId\n\tINNER JOIN [ADF].[DynamicPipelineConfig] D ON T.ConfigId = D.ConfigId\n\tWHERE D.TaskType = 'CopyData'\n) AS CopyDataTaskCount,\n(\n\tSELECT CAST(COUNT(T.TaskId) AS VARCHAR(10)) AS TypeCount\n\tFROM [ADF].[TaskLog] T\n\tINNER JOIN (SELECT TOP 1 * FROM Batch_cte ORDER BY BatchStartTime DESC) B ON T.RunId = B.BatchRunId\n\tINNER JOIN [ADF].[DynamicPipelineConfig] D ON T.ConfigId = D.ConfigId\n\tWHERE D.TaskType = 'CopyFile'\n) AS CopyFileTaskCount,\n(\n\tSELECT CAST(COUNT(T.TaskId) AS VARCHAR(10)) AS TypeCount\n\tFROM [ADF].[TaskLog] T\n\tINNER JOIN (SELECT TOP 1 * FROM Batch_cte ORDER BY BatchStartTime DESC) B ON T.RunId = B.BatchRunId\n\tINNER JOIN [ADF].[DynamicPipelineConfig] D ON T.ConfigId = D.ConfigId\n\tWHERE D.TaskType = 'StoredProc'\n) AS StoredProcTaskCount,\n(\n\tSELECT CAST(COUNT(E.ErrorId) AS VARCHAR(10)) AS ErrorCount\n\tFROM [ADF].[ErrorLog] E\n\tINNER JOIN (SELECT TOP 1 * FROM Batch_cte ORDER BY BatchStartTime DESC) B ON E.RunId = B.BatchRunId\n\tINNER JOIN [ADF].[DynamicPipelineConfig] D ON E.ConfigId = D.ConfigId\n) AS ErrorCount",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set TaskCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Tasks And Errors Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TaskCount",
							"value": {
								"value": "@activity('Tasks And Errors Lookup').output.FirstRow.TaskCount",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set CopyDataTaskCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Tasks And Errors Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "CopyDataTaskCount",
							"value": {
								"value": "@activity('Tasks And Errors Lookup').output.FirstRow.CopyDataTaskCount",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set CopyFileTaskCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Tasks And Errors Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "CopyFileTaskCount",
							"value": {
								"value": "@activity('Tasks And Errors Lookup').output.FirstRow.CopyFileTaskCount",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StoredProcTaskCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Tasks And Errors Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StoredProcTaskCount",
							"value": {
								"value": "@activity('Tasks And Errors Lookup').output.FirstRow.StoredProcTaskCount",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ErrorCount",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Tasks And Errors Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorCount",
							"value": {
								"value": "@activity('Tasks And Errors Lookup').output.FirstRow.ErrorCount",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set BatchDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "The Batch Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchDate",
							"value": {
								"value": "@formatDateTime(activity('The Batch Lookup').output.FirstRow.BatchStartTime, 'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ETLServerName": {
						"type": "string",
						"defaultValue": "sql-datateam-dev-01.database.windows.net"
					},
					"ETLDatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-datateam-dev-01"
					},
					"ETLSchemaName": {
						"type": "string",
						"defaultValue": "ADF"
					},
					"ETLTableName": {
						"type": "string",
						"defaultValue": "DynamicPipelineConfig"
					},
					"EmailTo": {
						"type": "string",
						"defaultValue": "david.brinn@factaldata.com"
					},
					"EmailSubject": {
						"type": "string",
						"defaultValue": "Test"
					},
					"EmailMessage": {
						"type": "string",
						"defaultValue": "ThisIsATest"
					},
					"PipelineName": {
						"type": "string"
					},
					"SendMailLogicAppURL": {
						"type": "string",
						"defaultValue": "https://prod-23.uksouth.logic.azure.com:443/workflows/922d4bce0a2c4140a0dc680b1d0f3cc3/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=qt7W5xQxLjsY_t3TQ36-OLxGkYXakIP--wxAsTU3sfY"
					}
				},
				"variables": {
					"BatchRunId": {
						"type": "String"
					},
					"BatchStartTime": {
						"type": "String"
					},
					"BatchEndTime": {
						"type": "String"
					},
					"BatchDuration": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"TaskCount": {
						"type": "String"
					},
					"CopyDataTaskCount": {
						"type": "String"
					},
					"CopyFileTaskCount": {
						"type": "String"
					},
					"StoredProcTaskCount": {
						"type": "String"
					},
					"ErrorCount": {
						"type": "String"
					},
					"BatchDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T14:36:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SendMailPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendMail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-04.uksouth.logic.azure.com:443/workflows/2551e8a632d64086bded14022b3958c3/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=WbYFYRQV4bv8KwKGKnz5xSuhl8kA701GGn3zwAtthbQ",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat('{\"DataFactoryName\": \"', pipeline().DataFactory, '\",\"EmailTo\": \"', pipeline().parameters.EmailTo, '\",\"ErrorMessage\": \"', pipeline().parameters.ErrorMessage, '\",\"PipelineName\": \"', pipeline().Pipeline, '\",\"Subject\":\"', pipeline().parameters.Subject, '\"}')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"EmailTo": {
						"type": "string",
						"defaultValue": "david@brinn.co.uk"
					},
					"ErrorMessage": {
						"type": "string",
						"defaultValue": "Error123"
					},
					"Subject": {
						"type": "string",
						"defaultValue": "ErrorTest"
					}
				},
				"folder": {
					"name": "Junk/Dev"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-03T15:04:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TheBatch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "The overnight batch for the DWH project",
				"activities": [
					{
						"name": "LogicalGroupsLookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute ADF_Dynamic Copy From Data Lake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.DynamicPipelineConfig",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.ETLServerName",
										"type": "Expression"
									},
									"DatabaseName": {
										"value": "@pipeline().parameters.ETLDatabaseName",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@pipeline().parameters.ETLSchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.ETLTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach MasterControl",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LogicalGroupsLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LogicalGroupsLookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute MasterControl Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "MasterControl - AzureSQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ETLServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"ETLDatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											},
											"ETLSchemaName": {
												"value": "@pipeline().parameters.ETLSchemaName",
												"type": "Expression"
											},
											"ETLTableName": {
												"value": "@pipeline().parameters.ETLTableName",
												"type": "Expression"
											},
											"LogicalGroup": {
												"value": "@string(Item().LogicalGroup)",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@variables('TriggerName')",
												"type": "Expression"
											},
											"MasterRunId": {
												"value": "@variables('MasterRunId')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Set MasterRunId",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "MasterRunId",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set PipelineName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineName",
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set TriggerName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TriggerName",
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set StartTime",
						"description": ".",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineStartTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update Pipeline LogInfo",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set EndTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ADF].[pr_InsertPipelineLogInfo]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@variables('MasterRunId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineStartTime": {
									"value": {
										"value": "@variables('PipelineStartTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"PipelineEndTime": {
									"value": {
										"value": "@variables('PipelineEndTime')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@variables('TriggerName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DynamicAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"ServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"DatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set EndTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach MasterControl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineEndTime",
							"value": {
								"value": "@convertFromUtc(utcnow(), 'GMT Standard Time')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute ADF_Dynamic Copy From Data Lake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set MasterRunId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set PipelineName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set TriggerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyBinaryFileFromDataLakeToStorageAccount",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ETLServerName": {
									"value": "@pipeline().parameters.ETLServerName",
									"type": "Expression"
								},
								"ETLDatabaseName": {
									"value": "@pipeline().parameters.ETLDatabaseName",
									"type": "Expression"
								},
								"ETLSchemaName": {
									"value": "@pipeline().parameters.ETLSchemaName",
									"type": "Expression"
								},
								"ETLTableName": {
									"value": "@pipeline().parameters.ETLTableName",
									"type": "Expression"
								},
								"MasterRunId": {
									"value": "@variables('MasterRunId')",
									"type": "Expression"
								},
								"StorageAccount": {
									"value": "@pipeline().parameters.StorageAccount",
									"type": "Expression"
								},
								"StorageAccountContainer": {
									"value": "@pipeline().parameters.StorageAccountContainer",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Post Batch Email",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Update Pipeline LogInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.SendPostBatchEmail",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute ADF_Send Email",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SendEmail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ETLServerName": {
												"value": "@pipeline().parameters.ETLServerName",
												"type": "Expression"
											},
											"ETLDatabaseName": {
												"value": "@pipeline().parameters.ETLDatabaseName",
												"type": "Expression"
											},
											"ETLSchemaName": {
												"value": "@pipeline().parameters.ETLSchemaName",
												"type": "Expression"
											},
											"ETLTableName": {
												"value": "@pipeline().parameters.ETLTableName",
												"type": "Expression"
											},
											"EmailTo": {
												"value": "@pipeline().parameters.EmailTo",
												"type": "Expression"
											},
											"EmailSubject": {
												"value": "@pipeline().parameters.EmailSubject",
												"type": "Expression"
											},
											"EmailMessage": {
												"value": "@pipeline().parameters.EmailMessage",
												"type": "Expression"
											},
											"PipelineName": {
												"value": "@pipeline().parameters.PipelineName",
												"type": "Expression"
											},
											"SendMailLogicAppURL": {
												"value": "@pipeline().parameters.SendMailLogicAppURL",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ETLServerName": {
						"type": "string",
						"defaultValue": "sql-factaldata-01.database.windows.net"
					},
					"ETLDatabaseName": {
						"type": "string",
						"defaultValue": "sqldb-factaldata-02"
					},
					"ETLSchemaName": {
						"type": "string",
						"defaultValue": "ADF"
					},
					"ETLTableName": {
						"type": "string",
						"defaultValue": "DynamicPipelineConfig"
					},
					"DynamicPipelineConfig": {
						"type": "string",
						"defaultValue": "SELECT DISTINCT LogicalGroup FROM [ADF].[DynamicPipelineConfig]  WHERE [Active] = 1 AND [LogicalGroup] > 0 ORDER BY LogicalGroup"
					},
					"EmailTo": {
						"type": "string"
					},
					"EmailSubject": {
						"type": "string"
					},
					"EmailMessage": {
						"type": "string"
					},
					"PipelineName": {
						"type": "string"
					},
					"SendMailLogicAppURL": {
						"type": "string"
					},
					"SendPostBatchEmail": {
						"type": "bool",
						"defaultValue": false
					},
					"StorageAccount": {
						"type": "string"
					},
					"StorageAccountContainer": {
						"type": "string"
					}
				},
				"variables": {
					"PipelineStartTime": {
						"type": "String"
					},
					"PipelineEndTime": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"PipelineName": {
						"type": "String"
					},
					"MasterRunId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-09T15:19:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/CopyBinaryFileFromDataLakeToStorageAccount')]",
				"[concat(variables('factoryId'), '/pipelines/MasterControl - AzureSQL')]",
				"[concat(variables('factoryId'), '/pipelines/SendEmail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzDB_FactTransaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_FactalData",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "srv-factaldata-01.database.windows.net",
						"DBName": "db-factaldata-01-dev"
					}
				},
				"folder": {
					"name": "Junk"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TransactionKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CategoryKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DirectDebitKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Amount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Balance",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "DWH",
					"table": "Fact_Transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_FactalData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzDB_NewRows')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "tempFactalData",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "DWH",
					"table": "Fact_Transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/tempFactalData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataDestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLake_FinanceFiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLake_FinanceFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSource_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SurfaceFiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(dataset().FolderPath,'/',dataset().Directory)",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SurfaceFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryDataSource_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SurfaceFiles",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@concat(dataset().FolderPath,'/',dataset().Directory)",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SurfaceFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeBinaryFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DataLakeStorageAccount": {
						"type": "string"
					},
					"DataLakeContainer": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().DataLakeContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeBinaryFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DataLakeStorageAccount": {
						"type": "string"
					},
					"DataLakeContainer": {
						"type": "string"
					},
					"DataLakeDirectory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().DataLakeContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeBinarySource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(Item().FileName, '.', Item().FileExtension)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@Item().SubDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@Item().Container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeDelimitedFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"SubDirectory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().SubDirectory",
							"type": "Expression"
						},
						"fileSystem": "rest-landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLake_FinanceFiles",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "financefiles"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Amount",
						"type": "String"
					},
					{
						"name": "Balance",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLake_FinanceFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicFileExcel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageAccount",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"SubDirectory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"SheetName": {
						"type": "string"
					},
					"Range": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().SheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().SubDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"range": {
						"value": "@dataset().Range",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicREST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicRestService",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						},
						"UserName": "restuser",
						"Password": "RestPassword"
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicRestService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicsEntity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicDynamics",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"EntityName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "DynamicsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": {
						"value": "@dataset().EntityName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicDynamics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExcelFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicFileSystem",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SubFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"SheetName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().SheetName",
						"type": "Expression"
					},
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().SubFolder",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicFileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileSystemDelimitedFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicFileSystem",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SubFolder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().SubFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicFileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						},
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF Framework"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Stage_Files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_FactalData",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "srv-factaldata-01.database.windows.net",
						"DBName": "db-factaldata-01-dev"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Amount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Balance",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "FileName",
						"type": "varchar"
					},
					{
						"name": "LoadStart",
						"type": "varchar"
					},
					{
						"name": "LoadEnd",
						"type": "varchar"
					},
					{
						"name": "RunId",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "Stage",
					"table": "Files"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_FactalData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageAccountBinaryFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageAccount",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"StorageAccount": {
						"type": "string"
					},
					"StorageAccountContainer": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MyFinance"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().StorageAccountContainer",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADFControlAKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ADFControlAKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLake_FinanceFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLake_FinanceFiles_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLake_FinanceFiles_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_FactalData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "srv-factaldata-01.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "db-factaldata-01-dev"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_FactalData_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageAccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureStorageAccount_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DynamicAzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDataBricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4968438946853361.1.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADFControlAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "DatabricksAccessToken"
					},
					"existingClusterId": "0713-141616-gape427"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADFControlAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicDynamics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Dynamics",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://mencap-d365crm-live.crm4.dynamics.com/",
					"authenticationType": "Office365",
					"username": "[parameters('DynamicDynamics_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADFControlAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "DynamicsPassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADFControlAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicFileSystem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('DynamicFileSystem_properties_typeProperties_host')]",
					"userId": "[parameters('DynamicFileSystem_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADFControlAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "MyAccountPassword-DavidBrinnCoUK",
						"secretVersion": ""
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADFControlAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicRestService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"UserName": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('DynamicRestService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('DynamicRestService_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADFControlAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Password",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADFControlAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicSqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamically connects to SQL Server using the Self Hosted Integration",
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DatabaseName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('DynamicSqlServer_connectionString')]",
					"userName": "[parameters('DynamicSqlServer_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADFControlAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQLServerPassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADFControlAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurfaceFiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Files located on the surface file system",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('SurfaceFiles_properties_typeProperties_host')]",
					"userId": "[parameters('SurfaceFiles_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ADFControlAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "FinanceFilesPassword",
						"secretVersion": "ADF_User"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADFControlAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WebTable')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Web",
				"typeProperties": {
					"url": "[parameters('WebTable_properties_typeProperties_url')]",
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/kv_WBC_DataAnalytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"KeyVaultName": {
						"type": "string",
						"defaultValue": "https://kv-wbcdataanalytics-prod.vault.azure.net/"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('kv_WBC_DataAnalytics_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldb_WBC_Data_Analytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sqldb_WBC_Data_Analytics_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stwbcdataanalytics')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('stwbcdataanalytics_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('stwbcdataanalytics_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tempFactalData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('tempFactalData_connectionString')]"
				}
			},
			"dependsOn": []
		}
	]
}